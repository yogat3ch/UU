% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/universal_useful.R
\name{gbort}
\alias{gbort}
\title{Custom error message
Throw \link[rlang]{abort} with \link[cli]{format_error}}
\usage{
gbort(
  message = NULL,
  class = NULL,
  ...,
  trace = rlang::trace_back(),
  parent = NULL,
  e = rlang::caller_env()
)
}
\arguments{
\item{message}{The message to display, formatted as a \strong{bulleted
list}. The first element is displayed as an \emph{alert} bullet
prefixed with \code{!} by default. Elements named \code{"*"}, \code{"i"}, and
\code{"x"} are formatted as regular, info, and cross bullets
respectively. Se\ifelse{{html}{\link[rlang:topic-condition-formatting]{Formatting condition messages}}{\link[rlang:topic-condition-formatting]{Formatting condition messages}}})` for more
about bulleted messaging.

If a message is not supplied, it is expected that the message is
generated \strong{lazily} through \code{\link[rlang:cnd_message]{cnd_header()}} and \code{\link[rlang:cnd_message]{cnd_body()}}
methods. In that case, \code{class} must be supplied. Only \code{inform()}
allows empty messages as it is occasionally useful to build user
output incrementally.}

\item{class}{Subclass of the condition.}

\item{...}{Additional data to be stored in the condition object.
If you supply condition fields, you should usually provide a
\code{class} argument. You may consider prefixing condition fields
with the name of your package or organisation to prevent name
collisions.}

\item{trace}{A \code{trace} object created by \code{\link[rlang:trace_back]{trace_back()}}.}

\item{parent}{Supply \code{parent} when you rethrow an error from a
condition handler (e.g. with \code{\link[rlang:try_fetch]{try_fetch()}}).
\itemize{
\item If \code{parent} is a condition object, a \emph{chained error} is
created, which is useful when you want to enhance an error with
more details, while still retaining the original information.
\item If \code{parent} is \code{NA}, it indicates an unchained rethrow, which
is useful when you want to take ownership over an error and
rethrow it with a custom message that better fits the
surrounding context.

Technically, supplying \code{NA} lets \code{abort()} know it is called
from a condition handler. This helps it create simpler
backtraces where the condition handling context is hidden by
default.
}}

\item{e}{\code{(environment)} calling environment. Passed to \code{glue} for making the message}
}
\description{
Custom error message
Throw \link[rlang]{abort} with \link[cli]{format_error}
}
