% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/universal_useful.R
\name{expr_pipe}
\alias{expr_pipe}
\title{Return a list of expressions all piped together as a single expression}
\usage{
expr_pipe(exprs)
}
\arguments{
\item{exprs}{\code{expressions} See \code{\link[rlang]{exprs}}}
}
\value{
\code{expression}
}
\description{
Useful when making complex compound statements that require dynamic substitution via tidy eval for dynamically created variables derived from the context.
}
\examples{
(.data <- tibble::tibble(val = runif(10)))
(exp <- expr_pipe(
  rlang::exprs(
    .data,
    dplyr::mutate(val = val + 5, category = sample(1:3, length(val), replace = TRUE)),
    dplyr::group_by(category),
    dplyr::summarise(s = sum(val))
  )
))
rlang::eval_bare(exp)
}
